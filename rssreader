#!/bin/ksh -x
#
# rsksh v1.0 - rss feed notifier
#
#     Copyright (C) 2008  Stefan Marsiske
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###########
# you'll need these to use rsksh:
# apt-get install curl xmlstarlet dzen2 imagemagick

. $HOME/.rskshrc

#### end of config ####

feedcnt=0
itemcnt=0
tmpfile=$(mktemp)
cat ~/.rssreader | while read feed ; do
   feedcnt=$((feedcnt +1))
   cachefile=/tmp/rssreader-cache-$feedcnt
   [[ ! -f "$cachefile" ]] && echo '<rss version="2.0"><channel /></rss>' >$cachefile
   
   # get feed
   curl --retry 3 --silent $feed | 
      sed '/^$/d' >$tmpfile

   # get feed icon
   curl -s -k $(xmlstarlet sel -TBD -t -m "/rss/channel/image/url" -v "." $tmpfile) 2>/dev/null |
      convert - ${cachefile}.logo.xpm

   # get changes
   xmldiff -x $cachefile $tmpfile |
       # clean up converted amps
       sed -e 's/&/&amp;/g' | 
       # only retrieve added items, other changes are ignored
       xmlstarlet tr --omit-decl getnewitems.xsl |
       # clean up items
       sed -e '/^[ 	]*$/d'  -e 's/^[ 	]*//' |
       # retrieve only item or all
       sed -n "${1:-1},${1:-$}p" |
       while read newitem; do
          # get added item
          xmlstarlet sel -TBD -t -m "${newitem}/following-sibling::item[1]" -c "." $tmpfile | 
            # convert item to text
            xmlstarlet tr --omit-decl item2txt.xsl | 
            # parse item
            while read itemdata; do
               case $itemdata in 
                  T:*) title=${itemdata##T:} continue;;
                  A:*) author=${itemdata##A:} continue;;
                  D:*) date=${itemdata##D:} continue;;
               esac
            done

            if [[ -z "$output" ]]; then 
               output="$title\n$author: $title"
            else
               output="${output}\n$author: $title"
            fi
            echo "$author: $title%%${newitem}/following-sibling::item[1]" >>$ITEMCACHE

            itemcnt=$((itemcnt+1))
       done
    mv $tmpfile $cachefile
done 

output="^tw()^fg(red)[${itemcnt}]^fg() ${output}"
print "$output" >$DZENFEED

