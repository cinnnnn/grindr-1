#!/usr/bin/env python
# vim: set fileencoding=utf8

import pygtk,sys,yaml
pygtk.require('2.0')
import gtk

GUISINGLEHEIGHT=28
GUITABBEDHEIGHT=58
GUIWIDTH=400
COL_TEXT = 0

class CompletedEntry(gtk.Entry):
    def __init__(self):
        gtk.Entry.__init__(self)
        completion = gtk.EntryCompletion()
        completion.set_match_func(self.match_func)
        completion.connect("match-selected",
                            self.on_completion_match)
        completion.set_model(gtk.ListStore(str))
        completion.set_text_column(COL_TEXT)
        self.set_completion(completion)

    def match_func(self, completion, key, iter):
        model = completion.get_model()
        return model[iter][COL_TEXT].startswith(self.get_text())

    def on_completion_match(self, completion, model, iter):
        self.set_text(model[iter][COL_TEXT])
        self.set_position(-1)

    def add_words(self, words):
        model = self.get_completion().get_model()
        for word in words:
            model.append([word])

class GUI:
   def __init__(self):
      self.win=gtk.Dialog("gaskr",flags=gtk.DIALOG_NO_SEPARATOR)
      self.win.set_title("gaskr")
      self.win.set_position(gtk.WIN_POS_CENTER_ALWAYS)
      self.win.action_area.set_homogeneous(False)
      self.win.connect('delete-event', gtk.main_quit)
      self.inputs=[]

   def enter_callback(self, widget, entry):
      inputs={}
      for widget in self.inputs:
         inputs[widget['name']]=widget['entry'].get_text()
      print yaml.dump(inputs)
      sys.exit(0)

   def addinput(self,name,desc=None,type='text',label=None):
      widget={'name': name}
      widget['entry'] = CompletedEntry()
      widget['entry'].add_words([u'ötlet',u'mérföldkő',u'sprint',u'beruházás',u'fejlesztés',u'szervezés',u'javítás',u'egyéb feladat'])
      widget['entry'].connect("activate", self.enter_callback, widget['entry'])

      widget['label'] = gtk.Label()
      if not label:
         label='_'+name
      widget['label'].set_text_with_mnemonic(label)
      widget['label'].set_alignment(xalign=1, yalign=0.5) 
      self.inputs.append(widget)

   def construct(self):
      inputlen=len(self.inputs)
      if(inputlen==1):
         hbox=gtk.HBox()
         hbox.pack_start(self.inputs[0]['label'], False, False, 0)
         self.inputs[0]['entry'].set_size_request(400,20)
         hbox.pack_start(self.inputs[0]['entry'], True, True, 0)
         self.win.vbox.pack_start(hbox,False,False,0)
         self.win.set_size_request(GUIWIDTH, GUISINGLEHEIGHT)
         return
      if(inputlen>1):
         nbook=gtk.Notebook()
         nbook.set_tab_pos(gtk.POS_BOTTOM)
         for widget in self.inputs:
            nbook.append_page(widget['entry'],widget['label'])
         self.win.vbox.pack_start(nbook,False,False,0)
         self.win.set_size_request(GUIWIDTH, GUITABBEDHEIGHT)

   def run(self):
      self.win.show_all()
      gtk.main()

if __name__ == "__main__":
   gui=GUI()
   gui.addinput("Title")
   gui.addinput("Description")
   gui.construct()
   gui.run()
