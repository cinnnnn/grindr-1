#!/usr/bin/env python
#     Copyright (C) 2008  Stefan Marsiske
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# vim: set fileencoding=utf8

import pygtk,sys,yaml
pygtk.require('2.0')
import gtk

GUIWIDTH=400
COL_TEXT = 0

def errhandler(param):
   print "unrecognized param:", param
   return None

def ignore(param):
   print "ignoring param:", param
   return None 

def get_active_text(combobox):
   model = combobox.get_model()
   active = combobox.get_active()
   if active < 0:
      return None
   return model[active][0]

class CompletedEntry(gtk.Entry):
    def __init__(self):
        gtk.Entry.__init__(self)
        completion = gtk.EntryCompletion()
        completion.set_match_func(self.match_func)
        completion.connect("match-selected",
                            self.on_completion_match)
        completion.set_model(gtk.ListStore(str))
        completion.set_text_column(COL_TEXT)
        self.set_completion(completion)

    def match_func(self, completion, key, iter):
        model = completion.get_model()
        return model[iter][COL_TEXT].startswith(self.get_text())

    def on_completion_match(self, completion, model, iter):
        self.set_text(model[iter][COL_TEXT])
        self.set_position(-1)

    def add_words(self, words):
        model = self.get_completion().get_model()
        for word in words:
            model.append([word])

class GUI:
   def __init__(self):
      self.win=gtk.Dialog("gaskr",flags=gtk.DIALOG_NO_SEPARATOR)
      self.win.set_title("gaskr")
      self.win.set_position(gtk.WIN_POS_CENTER_ALWAYS)
      self.win.action_area.set_homogeneous(False)
      self.win.connect('delete-event', gtk.main_quit)
      self.inputs=[]
      self.buttons=[]
      self.hidden=[]
      self.showmore=None
      self.primaries=None
      self.secondaries=None
      self.fieldhandlers = {
            'text': self.addText,
            'select': self.addSelect, 
            'submit': self.addButton, 
            'textarea': self.addTextarea, 
            'hidden': self.addHidden, 
            # TODO add support for checkboxes, radiobuttons, etc
            }

   def togglemore(self, widget=None, data=None):
      if self.expander.get_expanded():
         self.secondaries.show_all()
      else:
         self.secondaries.hide_all()

   def enter_callback(self, widget=None, data=None):
      inputs={}
      # we can send this to feedr, which dispatches the request to the web
      # service. 
      if(data and data.has_key('name')):
         # set param with the name of the submit button pushed
         inputs[data['name']]=data['name']
      for widget in self.inputs:
         if(widget['type']=='text'):
            inputs[widget['name']]=widget['entry'].get_text()
         elif(widget['type']=='select'):
            inputs[widget['name']]=get_active_text(widget['entry'])
         elif(widget['type']=='textarea'):
            textbuffer=widget['textbuffer']
            start,end=textbuffer.get_bounds()
            inputs[widget['name']]=textbuffer.get_text(start,end)
      for field in self.hidden:
         inputs[field['name']]=field['value']

      res={'postfields': inputs, 'action': self.form['action']}
      if(self.form.has_key('resultxpath')):
         res['resultxpath']=self.form['resultxpath']
      print yaml.dump(res)
      sys.exit(0)

   def addText(self,field):
      widget={'name': field['name'], 'type': 'text', 'field': field}
      widget['entry'] = CompletedEntry()
      widget['entry'].add_words([u'ötlet',u'mérföldkő',u'sprint',u'beruházás',u'fejlesztés',u'szervezés',u'javítás',u'egyéb feladat'])
      widget['entry'].connect("activate", self.enter_callback)

      label = gtk.Label()
      if field.has_key('label'): 
         labeltext=field['label']
      else:
         labeltext="_"+field['name']
      label.set_text_with_mnemonic(labeltext)
      label.set_alignment(xalign=1, yalign=0.5) 
      widget['label']=label
      self.inputs.append(widget)

   def addTextarea(self,field):
      widget={'name': field['name'], 'type': 'textarea', 'field': field}
      sw = gtk.ScrolledWindow()
      sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
      textview=gtk.TextView()
      textview.set_editable(True)
      widget['textbuffer']=textview.get_buffer()
      sw.add(textview)
      widget['entry'] = sw

      widget['label'] = gtk.Label()
      if field.has_key('label'): 
         label=field['label']
      else:
         label="_"+field['name']
      widget['label'].set_text_with_mnemonic(label)
      widget['label'].set_alignment(xalign=1, yalign=0.5) 
      self.inputs.append(widget)

   def addSelect(self,field):
      widget={'name': field['name'], 'type': 'select', 'field': field}
      widget['entry'] = gtk.combo_box_new_text()
      for opt in field['options']:
         widget['entry'].append_text(opt)

      widget['label'] = gtk.Label()
      if field.has_key('label'): 
         label=field['label']
      else:
         label='_'+field['name']
      widget['label'].set_text_with_mnemonic(label)
      widget['label'].set_alignment(xalign=1, yalign=0.5) 
      self.inputs.append(widget)

   def addButton(self,field):
      widget={'type': 'submit', 'field': field}
      widget['entry']=gtk.Button(field['value'])
      if(field.has_key('name')):
            widget['name']=field['name']
      widget['entry'].connect("clicked", self.enter_callback, widget)
      self.buttons.append(widget)

   def addHidden(self,field):
      widget={'name': field['name'], 'type': 'hidden', 'value': field['value'], 'field': field}
      self.hidden.append(widget)

   def addinput(self,field):
      self.fieldhandlers.get(field['type'],errhandler)(field)

   def construct(self):
      inputlen=len(self.inputs)
      self.win.set_size_request(GUIWIDTH,-1)
      if(inputlen==1):
         hbox=gtk.HBox()
         hbox.pack_start(self.inputs[0]['label'], False, False, 0)
         self.inputs[0]['entry'].set_size_request(400,20)
         hbox.pack_start(self.inputs[0]['entry'], True, True, 0)
         self.win.vbox.pack_start(hbox,False,False,0)
      if(inputlen>1):
         self.primaries=gtk.VBox()
         self.secondaries=gtk.VBox()

         morelabel = gtk.CheckButton("_More Fields")
         self.expander=gtk.expander_new_with_mnemonic("_More Fields")
         self.expander.connect("notify::expanded", self.togglemore)
         self.expander.add(self.secondaries)
         self.secondaries.set_no_show_all(True)

         for widget in self.inputs:
            hbox=gtk.HBox()
            hbox.pack_start(widget['label'],False,False)
            hbox.pack_start(widget['entry'])
            if(widget['field']['primary']):
               self.primaries.pack_start(hbox,False,False,0)
            else:
               self.secondaries.pack_start(hbox,False,False,0)
         self.win.vbox.pack_start(self.primaries,False,False,0)
         self.win.vbox.pack_start(self.expander,False,False,0)

      if self.buttons:
         hbox=gtk.HBox()
         for button in self.buttons:
            hbox.pack_start(button['entry'],True,True,0)
         self.win.vbox.pack_start(hbox,False,False,0)

   def run(self):
      self.win.show_all()
      if self.secondaries:
         self.secondaries.set_no_show_all(False)
      gtk.main()

   def load(self,stream):
      self.form=yaml.load(stream)
      if not self.form.has_key('action'):
         return
      for field in self.form['fields']:
         self.addinput(field)

if __name__ == "__main__":
   gui=GUI()
   stdin = sys.stdin.read()
   gui.load(stdin)
   gui.construct()
   gui.run()
