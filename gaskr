#!/usr/bin/env python
# vim: set fileencoding=utf8

import pygtk,sys,yaml
pygtk.require('2.0')
import gtk

GUISINGLEHEIGHT=28
GUITABBEDHEIGHT=58
GUIWIDTH=400
COL_TEXT = 0

def errhandler(param):
   print "unrecognized param:", param
   return None

def ignore(param):
   print "ignoring param:", param
   return None 

def get_active_text(combobox):
   model = combobox.get_model()
   active = combobox.get_active()
   if active < 0:
      return None
   return model[active][0]

class CompletedEntry(gtk.Entry):
    def __init__(self):
        gtk.Entry.__init__(self)
        completion = gtk.EntryCompletion()
        completion.set_match_func(self.match_func)
        completion.connect("match-selected",
                            self.on_completion_match)
        completion.set_model(gtk.ListStore(str))
        completion.set_text_column(COL_TEXT)
        self.set_completion(completion)

    def match_func(self, completion, key, iter):
        model = completion.get_model()
        return model[iter][COL_TEXT].startswith(self.get_text())

    def on_completion_match(self, completion, model, iter):
        self.set_text(model[iter][COL_TEXT])
        self.set_position(-1)

    def add_words(self, words):
        model = self.get_completion().get_model()
        for word in words:
            model.append([word])

class GUI:
   def __init__(self):
      self.win=gtk.Dialog("gaskr",flags=gtk.DIALOG_NO_SEPARATOR)
      self.win.set_title("gaskr")
      self.win.set_position(gtk.WIN_POS_CENTER_ALWAYS)
      self.win.action_area.set_homogeneous(False)
      self.win.connect('delete-event', gtk.main_quit)
      self.inputs=[]
      self.buttons=[]
      self.hidden=[]
      self.fieldhandlers = {
            'text': self.addText,
            'select': self.addSelect, 
            'submit': self.addButton, 
            'hidden': self.addHidden, 
            }

   def enter_callback(self, widget=None, data=None):
      inputs={}
      if(data):
         inputs[data['name']]=1
      for widget in self.inputs:
         if(widget['type']=='text'):
            inputs[widget['name']]=widget['entry'].get_text()
         elif(widget['type']=='select'):
            inputs[widget['name']]=get_active_text(widget['entry'])
      for field in self.hidden:
         inputs[field['name']]=field['value']
      print yaml.dump(inputs)
      sys.exit(0)

   def addText(self,field):
      widget={'name': field['name'], 'type': 'text'}
      widget['entry'] = CompletedEntry()
      widget['entry'].add_words([u'ötlet',u'mérföldkő',u'sprint',u'beruházás',u'fejlesztés',u'szervezés',u'javítás',u'egyéb feladat'])
      widget['entry'].connect("activate", self.enter_callback)

      widget['label'] = gtk.Label()
      label='_'+field['name']
      widget['label'].set_text_with_mnemonic(label)
      widget['label'].set_alignment(xalign=1, yalign=0.5) 
      self.inputs.append(widget)

   def addSelect(self,field):
      widget={'name': field['name'], 'type': 'select'}
      widget['entry'] = gtk.combo_box_new_text()
      for opt in field['options']:
         widget['entry'].append_text(opt)

      widget['label'] = gtk.Label()
      label='_'+field['name']
      widget['label'].set_text_with_mnemonic(label)
      widget['label'].set_alignment(xalign=1, yalign=0.5) 
      self.inputs.append(widget)

   def addButton(self,field):
      widget={'name': field['name'], 'type': 'submit'}
      widget['entry']=gtk.Button(field['name'])
      widget['entry'].connect("clicked", self.enter_callback, widget)
      self.buttons.append(widget)

   def addHidden(self,field):
      widget={'name': field['name'], 'type': 'hidden', 'value': field['value']}
      self.hidden.append(widget)

   def addinput(self,field):
      self.fieldhandlers.get(field['type'],errhandler)(field)

   def construct(self):
      inputlen=len(self.inputs)
      self.win.set_size_request(GUIWIDTH,-1)
      if(inputlen==1):
         hbox=gtk.HBox()
         hbox.pack_start(self.inputs[0]['label'], False, False, 0)
         self.inputs[0]['entry'].set_size_request(400,20)
         hbox.pack_start(self.inputs[0]['entry'], True, True, 0)
         self.win.vbox.pack_start(hbox,False,False,0)
      if(inputlen>1):
         nbook=gtk.Notebook()
         nbook.set_tab_pos(gtk.POS_BOTTOM)
         for widget in self.inputs:
            nbook.append_page(widget['entry'],widget['label'])
         self.win.vbox.pack_start(nbook,False,False,0)
      if(len(self.buttons)>1):
         hbox=gtk.HBox()
         for button in self.buttons:
            hbox.pack_start(button['entry'],True,True,0)
         self.win.vbox.pack_start(hbox,False,False,0)

   def run(self):
      self.win.show_all()
      gtk.main()

   def load(self,stream):
      form=yaml.load(stream)
      if not form.has_key('action'):
         return
      for field in form['fields']:
         self.addinput(field)

if __name__ == "__main__":
   gui=GUI()
   stdin = sys.stdin.read()
   gui.load(stdin)
   gui.construct()
   gui.run()
