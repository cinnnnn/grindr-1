#!/usr/bin/env python
import tidy, sys, pycurl, cStringIO, yaml, getopt, os
from Ft.Xml.Domlette import NonvalidatingReader
from Ft.Xml.XPath.Context import Context
from Ft.Xml.XPath import Compile, Evaluate
from Ft.Xml.Xslt.Processor import Processor
from Ft.Xml.InputSource import DefaultFactory
from workr import fetch, send, normalize, VERSION

FORMTEMPLATE = '/home/stef/tasks/other/munchr/formscan.xsl'

def scan(xhtml,url):
   print >> sys.stderr, 'scanning forms'
   xsltproc = Processor()
   xsltproc.appendStylesheet(DefaultFactory.fromUri(FORMTEMPLATE))
   forms = xsltproc.run(DefaultFactory.fromString(xhtml,url),topLevelParams={u'url': url})
   print >> sys.stderr, 'done'
   return forms

def usage():
   print "bildr", VERSION
   print "usage: bildr <-l login.cfg> urls"
   print ""
   print "Options"
   print "-h, --help\t\t\tdisplay help"
   print "-l <file>, --logincfg=<file>\tlogin to urls using the specified login config"
   print "urls \tscan these urls for forms"

if(__name__=="__main__"):
   # handling of options
   try:
      opts, args = getopt.getopt(sys.argv[1:], "hl:", ["help","logincfg="])
   except getopt.GetoptError:
      usage()
      sys.exit(2)
   for o, a in opts:
      if o in ("-h","--help"):
         usage()
         sys.exit()
      if o in ("-l", "--logincfg"):
         try:
            loginparams = yaml.load(file(a, 'r'))
         except yaml.YAMLError, exc:
            print "Error in configuration file:", exc
         result,xhtml=fetch(loginparams)
         print result
   if(len(args)>0):
      # process each url specified 
      for url in args:
         sys.stderr.write("processing "+url+'\n')
         sys.stderr.flush()
         print scan(send({'action': url}),url)
   else:
      # we need to process stdin
      sys.stderr.write("processing stdin\n")
      sys.stderr.flush()
      print scan(normalize(sys.stdin.read()),'stdin://')
